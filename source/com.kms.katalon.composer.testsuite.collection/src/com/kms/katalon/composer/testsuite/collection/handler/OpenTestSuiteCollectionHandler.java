package com.kms.katalon.composer.testsuite.collection.handler;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.eclipse.e4.core.contexts.IEclipseContext;
import org.eclipse.e4.core.di.annotations.Optional;
import org.eclipse.e4.core.services.events.IEventBroker;
import org.eclipse.e4.ui.di.UIEventTopic;
import org.eclipse.e4.ui.model.application.MApplication;
import org.eclipse.e4.ui.model.application.ui.basic.MCompositePart;
import org.eclipse.e4.ui.model.application.ui.basic.MPart;
import org.eclipse.e4.ui.model.application.ui.basic.MPartStack;
import org.eclipse.e4.ui.workbench.IPresentationEngine;
import org.eclipse.e4.ui.workbench.modeling.EModelService;
import org.eclipse.e4.ui.workbench.modeling.EPartService;
import org.eclipse.jface.dialogs.MessageDialog;
import org.osgi.framework.FrameworkUtil;
import org.osgi.service.event.Event;
import org.osgi.service.event.EventHandler;

import com.kms.katalon.composer.components.impl.handler.OpenFileEntityHandler;
import com.kms.katalon.composer.components.impl.util.EntityPartUtil;
import com.kms.katalon.composer.components.log.LoggerSingleton;
import com.kms.katalon.composer.testsuite.collection.constant.ComposerTestsuiteCollectionMessageConstants;
import com.kms.katalon.composer.testsuite.collection.constant.ImageConstants;
import com.kms.katalon.composer.testsuite.collection.constant.StringConstants;
import com.kms.katalon.composer.testsuite.collection.part.TestSuiteCollectionCompositePart;
import com.kms.katalon.composer.testsuite.collection.part.TestSuiteCollectionPart;
import com.kms.katalon.constants.EventConstants;
import com.kms.katalon.constants.IdConstants;
import com.kms.katalon.controller.ProjectController;
import com.kms.katalon.controller.ReportController;
import com.kms.katalon.controller.TestSuiteCollectionController;
import com.kms.katalon.dal.exception.DALException;
import com.kms.katalon.entity.report.ReportCollectionEntity;
import com.kms.katalon.entity.testsuite.TestSuiteCollectionEntity;
import com.kms.katalon.tracking.service.Trackings;

public class OpenTestSuiteCollectionHandler {
    private static final String TEST_SUITE_COLLECTION_BUNDLE_URI = "bundleclass://"
            + FrameworkUtil.getBundle(OpenTestSuiteCollectionHandler.class).getSymbolicName() + "/";

    private static final String REPORT_BUNDLE_ID = "bundleclass://com.kms.katalon.composer.report/";

    private static final String TEST_SUITE_COLLECTION_COMPOSITE_PART_URI = TEST_SUITE_COLLECTION_BUNDLE_URI
            + TestSuiteCollectionCompositePart.class.getName();

    private static final String TEST_SUITE_COLLECTION_PART_URI = TEST_SUITE_COLLECTION_BUNDLE_URI
            + TestSuiteCollectionPart.class.getName();

    private static final String TEST_SUITE_COLLECTION_RESULT_PART_URI = REPORT_BUNDLE_ID
            + "com.kms.katalon.composer.report.parts.ReportCollectionPart";

    private static final String DEFAULT_CONTAINER_DATA = String.valueOf(100);

    @Inject
    private EModelService modelService;
    
    @Inject
    private MApplication application;
    
    @Inject
    private IEventBroker eventBroker;
    
    @Inject
    private EPartService partService;
    
    @Inject
    private IEclipseContext context;
    
    @PostConstruct
    public void registerEventHandler() {
        eventBroker.subscribe(EventConstants.EXPLORER_OPEN_SELECTED_ITEM, new EventHandler() {
            @Override
            public void handleEvent(Event event) {
                Object object = event.getProperty(EventConstants.EVENT_DATA_PROPERTY_NAME);
                if (object != null && object instanceof TestSuiteCollectionEntity) {
                    execute((TestSuiteCollectionEntity) object);
                }
            }
        });
    }
    
    protected void execute(TestSuiteCollectionEntity testSuiteCollectionEntity) {
        MCompositePart compositePart = null;
        try {
            MPartStack stack = (MPartStack) modelService.find(IdConstants.COMPOSER_CONTENT_PARTSTACK_ID,
                    application);
            if (stack != null) {
                String testSuiteCollectionCompositePartId = EntityPartUtil.getTestSuiteCollectionPartId(testSuiteCollectionEntity.getId());
                compositePart = (MCompositePart) modelService.find(testSuiteCollectionCompositePartId, stack);
                boolean alreadyOpened = true;
                if (compositePart == null) {
                    compositePart = modelService.createModelElement(MCompositePart.class);
                    compositePart.setElementId(testSuiteCollectionCompositePartId);
                    compositePart.setLabel(testSuiteCollectionEntity.getName());
                    compositePart.setCloseable(true);
                    compositePart.setContributionURI(TEST_SUITE_COLLECTION_COMPOSITE_PART_URI);
                    compositePart.setObject(testSuiteCollectionEntity);
                    compositePart.setTooltip(testSuiteCollectionEntity.getIdForDisplay());
                    stack.getChildren().add(compositePart);
                    alreadyOpened = false;
                }
    
                String subPartStackId = testSuiteCollectionCompositePartId
                        + IdConstants.TEST_SUITE_COLLECTION_SUB_PART_STACK_ID_SUFFIX;
    
                MPartStack subPartStack = (MPartStack) modelService.find(subPartStackId, compositePart);
                if (subPartStack == null) {
                    subPartStack = modelService.createModelElement(MPartStack.class);
                    subPartStack.setElementId(subPartStackId);
                    subPartStack.setContainerData(DEFAULT_CONTAINER_DATA);
                    compositePart.getChildren().add(subPartStack);
                }
    
                String mainPartId = testSuiteCollectionCompositePartId
                        + IdConstants.TEST_SUITE_COLLECTION_MAIN_PART_ID_SUFFIX;
                MPart mainPart = (MPart) modelService.find(mainPartId, subPartStack);
                if (mainPart == null) {
                    mainPart = modelService.createModelElement(MPart.class);
                    mainPart.setElementId(mainPartId);
                    mainPart.setContributionURI(TEST_SUITE_COLLECTION_PART_URI);
                    mainPart.setContainerData(DEFAULT_CONTAINER_DATA);
                    mainPart.getTags().add(IPresentationEngine.NO_MOVE);
                    context.set(TestSuiteCollectionEntity.class, testSuiteCollectionEntity);
                    subPartStack.getChildren().add(mainPart);
                }
    
                String resultPartId = testSuiteCollectionCompositePartId
                        + IdConstants.TEST_SUITE_COLLECTION_RESULT_PART_ID_SUFFIX;
                MPart resultPart = (MPart) modelService.find(resultPartId, subPartStack);
                if (resultPart == null) {
                    resultPart = modelService.createModelElement(MPart.class);
                    resultPart.setElementId(resultPartId);
                    resultPart.setContributionURI(TEST_SUITE_COLLECTION_RESULT_PART_URI);
                    resultPart.setContainerData(DEFAULT_CONTAINER_DATA);
                    resultPart.getTags().add(IPresentationEngine.NO_MOVE);
                    
                    ReportCollectionEntity lastRunReport = ReportController.getInstance().getLastRunReportCollectionEntity(testSuiteCollectionEntity);
                    context.set(ReportCollectionEntity.class, lastRunReport);
                    subPartStack.getChildren().add(resultPart);
                }
                
                partService.activate(compositePart);
                partService.activate(mainPart);
                partService.activate(resultPart);
                
                subPartStack.setSelectedElement(mainPart);
                stack.setSelectedElement(compositePart);
                
                TestSuiteCollectionCompositePart testSuiteCollectionCompositePart = (TestSuiteCollectionCompositePart) compositePart.getObject();
                testSuiteCollectionCompositePart.initComponent();
                
                if (!alreadyOpened) {
                    Trackings.trackOpenObject("testSuiteCollection");
                }
            }
        } catch (Exception e) {
            if (compositePart != null && compositePart.isVisible()) {
                partService.hidePart(compositePart, true);
            }
            LoggerSingleton.logError(e);
            MessageDialog.openError(null, StringConstants.ERROR_TITLE,
                    StringConstants.HAND_ERROR_MSG_UNABLE_TO_OPEN_TEST_SUITE_COLLECTION);
        }
    }

    @Inject
    @Optional
    private void execute(@UIEventTopic(EventConstants.TEST_SUITE_COLLECTION_OPEN) Object eventData) {
        if (ProjectController.getInstance().getCurrentProject() == null) {
            return;
        }

        if (!(eventData instanceof String)) {
            return;
        }
        try {
            execute(TestSuiteCollectionController.getInstance().getTestRunByDisplayId((String) eventData));
        } catch (DALException e) {
            MessageDialog.openError(null, StringConstants.WARN,
                    ComposerTestsuiteCollectionMessageConstants.HAND_UNDABLE_TO_OPEN_TEST_SUITE_COLLECTION);
        }
    }

}
