package com.kms.katalon.composer.testsuite.collection.handler;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.eclipse.e4.core.services.events.IEventBroker;
import org.eclipse.jface.dialogs.MessageDialog;
import org.osgi.framework.FrameworkUtil;
import org.osgi.service.event.Event;

import com.kms.katalon.composer.components.impl.constants.StringConstants;
import com.kms.katalon.composer.components.impl.event.EventServiceAdapter;
import com.kms.katalon.composer.components.impl.handler.OpenFileEntityHandler;
import com.kms.katalon.composer.components.impl.util.EntityPartUtil;
import com.kms.katalon.composer.testsuite.collection.constant.ImageConstants;
import com.kms.katalon.composer.testsuite.collection.part.TestSuiteCollectionPart;
import com.kms.katalon.constants.EventConstants;
import com.kms.katalon.controller.TestSuiteCollectionController;
import com.kms.katalon.dal.exception.DALException;
import com.kms.katalon.entity.testsuite.TestSuiteCollectionEntity;

public class OpenTestSuiteCollectionHandler extends OpenFileEntityHandler<TestSuiteCollectionEntity> {
    private static final String TEST_SUITE_COLLECTION_BUNDLE_URI = "bundleclass://"
            + FrameworkUtil.getBundle(OpenTestSuiteCollectionHandler.class).getSymbolicName() + "/";

    private static final String TEST_SUITE_COLLECTION_PART_URI = TEST_SUITE_COLLECTION_BUNDLE_URI + TestSuiteCollectionPart.class.getName();

    @Inject
    private IEventBroker eventBroker;

    @PostConstruct
    @Override
    protected void initialize() {
        super.initialize();
        eventBroker.subscribe(EventConstants.TEST_SUITE_COLLECTION_OPEN, new EventServiceAdapter() {
            @Override
            public void handleEvent(Event event) {
                Object object = getObject(event);
                if (!(object instanceof String)) {
                    return;
                }
                try {
                    execute(TestSuiteCollectionController.getInstance().getTestSuiteCollection((String) object));
                } catch (DALException e) {
                    MessageDialog.openError(null, StringConstants.WARN, "Unable to open test suite");
                }
            }
        });
    }

    @Override
    public String getContributionURI() {
        return TEST_SUITE_COLLECTION_PART_URI;
    }

    @Override
    public String getIconURI() {
        return ImageConstants.URL_16_TEST_SUITE_COLLECTION;
    }

    @Override
    public String getPartId(TestSuiteCollectionEntity fileEntity) {
        return EntityPartUtil.getTestSuiteCollectionPartId(fileEntity.getId());
    }

    @Override
    protected Class<? extends TestSuiteCollectionEntity> getEntityType() {
        return TestSuiteCollectionEntity.class;
    }

}
