package com.kms.katalon.composer.integration.analytics.testops.handlers;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.eclipse.e4.core.contexts.IEclipseContext;
import org.eclipse.e4.core.services.events.IEventBroker;
import org.eclipse.e4.ui.internal.workbench.PartServiceImpl;
import org.eclipse.e4.ui.model.application.MApplication;
import org.eclipse.e4.ui.model.application.ui.basic.MCompositePart;
import org.eclipse.e4.ui.model.application.ui.basic.MPartStack;
import org.eclipse.e4.ui.workbench.modeling.EModelService;
import org.eclipse.e4.ui.workbench.modeling.EPartService;
import org.osgi.service.event.Event;
import org.osgi.service.event.EventHandler;

import com.kms.katalon.composer.components.impl.tree.TestOpsTreeEntity;
import com.kms.katalon.composer.components.log.LoggerSingleton;
import com.kms.katalon.composer.integration.analytics.testops.constants.TestOpsStringConstants;
import com.kms.katalon.composer.integration.analytics.testops.parts.ExecutionHistoryPart;
import com.kms.katalon.composer.components.impl.constants.ImageConstants;
import com.kms.katalon.constants.EventConstants;
import com.kms.katalon.constants.IdConstants;

public class OpenTestOpsHandler {

	@Inject
	private IEventBroker eventBroker;

	@Inject
	private static EModelService modelService;

	@Inject
	private MApplication application;

	@Inject
	private IEclipseContext context;

	private final String EXECUTION_HISTORY_COMPOSITE_PART_ID = "execution_history_composite_part_id";

	private static final String EXECUTION_BUNDLE_URI = "bundleclass://com.kms.katalon.composer.integration.analytics.testops/";

	private static final String EXECUTION_PART_URI = EXECUTION_BUNDLE_URI + ExecutionHistoryPart.class.getName();

	@PostConstruct
	public void registerEventHandler() {
        eventBroker.subscribe(EventConstants.EXPLORER_OPEN_SELECTED_ITEM, new EventHandler() {
            @Override
            public void handleEvent(Event event) {
                Object object = event.getProperty(EventConstants.EVENT_DATA_PROPERTY_NAME);
                if (object instanceof TestOpsTreeEntity) {
                    openTestOps((TestOpsTreeEntity) object);
                }
            }
        });

        eventBroker.subscribe(EventConstants.PROJECT_CLOSED, new EventHandler() {
            @Override
            public void handleEvent(Event event) {
                closeExecutionView();
            }
        });

	}

	private void openTestOps(TestOpsTreeEntity sourceObject) {
		switch (sourceObject.getTesOpsAction()) {
		case OPEN_EXECUTION:
			openExecutionView();
			break;

		default:
			break;
		}
	}
	
	private void closeExecutionView() {
	    MCompositePart executionHistoryCompositePart = null;
        try {
            MPartStack stack = (MPartStack) modelService.find(IdConstants.COMPOSER_CONTENT_PARTSTACK_ID, application);
            if (stack != null) {
                executionHistoryCompositePart = (MCompositePart) modelService.find(EXECUTION_HISTORY_COMPOSITE_PART_ID,
                        stack);
                if (executionHistoryCompositePart != null) {
                    stack.getChildren().remove(executionHistoryCompositePart);
                }

            }
        } catch (Exception e) {
            LoggerSingleton.logError(e);
        }
	}

    private void openExecutionView() {
        MCompositePart executionHistoryCompositePart = null;
        try {
            MPartStack stack = (MPartStack) modelService.find(IdConstants.COMPOSER_CONTENT_PARTSTACK_ID, application);
            if (stack != null) {
                executionHistoryCompositePart = (MCompositePart) modelService.find(EXECUTION_HISTORY_COMPOSITE_PART_ID,
                        stack);
                if (executionHistoryCompositePart == null) {
                    executionHistoryCompositePart = modelService.createModelElement(MCompositePart.class);
                    executionHistoryCompositePart.setElementId(EXECUTION_HISTORY_COMPOSITE_PART_ID);
                    executionHistoryCompositePart.setLabel(TestOpsStringConstants.LBL_EXECUTIONS);
                    executionHistoryCompositePart.setCloseable(true);
                    executionHistoryCompositePart.setContributionURI(EXECUTION_PART_URI);
                    executionHistoryCompositePart.setIconURI(ImageConstants.URL_TESTOPS_EXECUTIONS);
                    executionHistoryCompositePart.setTooltip(TestOpsStringConstants.LBL_EXECUTIONS);
                    stack.getChildren().add(executionHistoryCompositePart);
                }

                EPartService partService = context.getActive(EPartService.class);
                if (partService == null) {
                    partService = context.getActive(PartServiceImpl.class);
                }

                partService.activate(executionHistoryCompositePart, true);
                stack.setSelectedElement(executionHistoryCompositePart);

            }
        } catch (Exception e) {
            LoggerSingleton.logError(e);
        }
    }

}
