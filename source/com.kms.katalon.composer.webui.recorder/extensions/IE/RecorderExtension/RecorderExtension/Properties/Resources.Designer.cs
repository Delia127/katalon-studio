//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RecorderExtension.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("RecorderExtension.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //Recursively loop through DOM elements and assign properties to object
        ///function treeHTML(element, object, currentWindow) {
        ///	if (!element) {
        ///		return;
        ///	}
        ///	object[&quot;type&quot;] = element.nodeName.toLowerCase();
        ///	object[&quot;attributes&quot;] = {};
        ///	if (element.attributes != null &amp;&amp; element.attributes.length) {
        ///		for (var i = 0; i &lt; element.attributes.length; i++) {
        ///			var elementAttribute = element.attributes[i];
        ///			if ((elementAttribute.value !== &apos;&apos;) &amp;&amp; (elementAttribute.value != null) &amp;&amp; (elementAttribute.value [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string common {
            get {
                return ResourceManager.GetString("common", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // SERVER CONSTANTS
        ///var KATALON_SERVER_URL_PREFIX = &quot;http://localhost:&quot;;
        ///var KATALON_SERVER_URL_SUFFIX = &quot;/&quot;
        ///var XHTTP_GET_METHOD = &quot;GET&quot;;
        ///var XHTTP_POST_METHOD = &quot;POST&quot;;
        ///var XHTTP_ACTION = &quot;xhttp&quot;;
        ///
        ///// STYLE CONSTANTS
        ///var ELEMENT_HOVER_OUTLINE_STYLE = &quot;2px solid #f00&quot;;
        ///
        ///var INFO_DIV_DEFAULT_BACKGROUND_COLOR = &quot;black&quot;;
        ///var INFO_DIV_DEFAULT_FOREGROUND_COLOR = &quot;white&quot;;
        ///var INFO_DIV_DEFAULT_BORDER_COLOR = &apos;white&apos;;
        ///var INFO_DIV_HOVER_BACKGROUND_COLOR = &quot;blue&quot;;
        ///var INFO_DIV_HOVER_FOREGROUND_COLOR = [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string constants {
            get {
                return ResourceManager.GetString("constants", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var lastEvent;
        ///var gHoverElement;		//whatever element the mouse is over
        ///var infoDiv;		//currently just container for InfoDivHover, might add more here
        ///var infoDivHover;	//container for hoverText text node.
        ///var hoverText;		//show information about current element that the mouse is over
        ///
        ///function setupDOMSelection() {
        ///	setupEventListeners();
        ///	createInfoDiv();
        ///}
        ///
        ///function setupEventListeners() {
        ///	document.onchange = change;
        ///	document.onmouseup = mouseUp;
        ///	document.onmouseover = mouseOver;
        ///	docum [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string dom_recorder {
            get {
                return ResourceManager.GetString("dom_recorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*! jQuery v1.11.2 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
        ///!function(a,b){&quot;object&quot;==typeof module&amp;&amp;&quot;object&quot;==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error(&quot;jQuery requires a window with a document&quot;);return b(a)}:b(a)}(&quot;undefined&quot;!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=&quot;1.11.2&quot;,m=function(a,b){return new m.fn.init(a,b)},n=/^[\s\uFEFF\x [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string jquery_1_11_2_min {
            get {
                return ResourceManager.GetString("jquery_1_11_2_min", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
        ///(function(){function N(p,r){function q(a){if(q[a]!==w)return q[a];var c;if(&quot;bug-string-char-index&quot;==a)c=&quot;a&quot;!=&quot;a&quot;[0];else if(&quot;json&quot;==a)c=q(&quot;json-stringify&quot;)&amp;&amp;q(&quot;json-parse&quot;);else{var e;if(&quot;json-stringify&quot;==a){c=r.stringify;var b=&quot;function&quot;==typeof c&amp;&amp;s;if(b){(e=function(){return 1}).toJSON=e;try{b=&quot;0&quot;===c(0)&amp;&amp;&quot;0&quot;===c(new t)&amp;&amp;&apos;&quot;&quot;&apos;==c(new A)&amp;&amp;c(u)===w&amp;&amp;c(w)===w&amp;&amp;c()===w&amp;&amp;&quot;1&quot;===c(e)&amp;&amp;&quot;[1]&quot;==c( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string json3_min {
            get {
                return ResourceManager.GetString("json3_min", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $(&apos;document&apos;).ready(function () {
        ///    startRecord();
        ///});.
        /// </summary>
        internal static string main {
            get {
                return ResourceManager.GetString("main", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function treeHTMLForRecord(action, element, object, currentWindow) {
        ///	if (!element) {
        ///		return;
        ///	}
        ///	treeHTML(element, object, currentWindow);
        ///	object[&quot;action&quot;] = action;
        ///	
        ///	var nodeList = element.childNodes;
        ///	if (nodeList != null &amp;&amp; nodeList.length) {
        ///		object[&quot;content&quot;] = [];
        ///		for (var i = 0; i &lt; nodeList.length; i++) {
        ///			if (nodeList[i].nodeType == 3) {
        ///				object[&quot;content&quot;].push(nodeList[i].value);
        ///			}
        ///		}
        ///	}
        ///}
        ///
        ///function mapDOMForRecord(action, element, currentWindow) {
        ///	var treeObj [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string record_common {
            get {
                return ResourceManager.GetString("record_common", resourceCulture);
            }
        }
    }
}
