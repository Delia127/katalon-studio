package com.kms.katalon.composer.testsuite.handlers;

import static com.kms.katalon.core.constants.StringConstants.DF_CHARSET;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.IOException;
import java.net.URL;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Path;
import org.eclipse.e4.core.contexts.IEclipseContext;
import org.eclipse.e4.core.di.annotations.Optional;
import org.eclipse.e4.core.services.events.IEventBroker;
import org.eclipse.e4.ui.di.UIEventTopic;
import org.eclipse.e4.ui.model.application.MApplication;
import org.eclipse.e4.ui.model.application.ui.basic.MCompositePart;
import org.eclipse.e4.ui.model.application.ui.basic.MPart;
import org.eclipse.e4.ui.model.application.ui.basic.MPartStack;
import org.eclipse.e4.ui.workbench.IPresentationEngine;
import org.eclipse.e4.ui.workbench.modeling.EModelService;
import org.eclipse.e4.ui.workbench.modeling.EPartService;
import org.eclipse.jface.dialogs.MessageDialog;
import org.osgi.framework.FrameworkUtil;
import org.osgi.service.event.Event;
import org.osgi.service.event.EventHandler;

import com.kms.katalon.composer.components.impl.util.EntityPartUtil;
import com.kms.katalon.composer.components.log.LoggerSingleton;
import com.kms.katalon.composer.testsuite.constants.ComposerTestsuiteMessageConstants;
import com.kms.katalon.composer.testsuite.constants.ImageConstants;
import com.kms.katalon.composer.testsuite.constants.StringConstants;
import com.kms.katalon.composer.testsuite.parts.FilteringTestSuiteCompositePart;
import com.kms.katalon.composer.testsuite.parts.FilteringTestSuitePart;
import com.kms.katalon.composer.testsuite.parts.TestSuiteCompositePart;
import com.kms.katalon.composer.testsuite.parts.TestSuiteIntegrationPart;
import com.kms.katalon.composer.testsuite.parts.TestSuitePart;
import com.kms.katalon.composer.util.groovy.GroovyEditorUtil;
import com.kms.katalon.constants.EventConstants;
import com.kms.katalon.constants.IdConstants;
import com.kms.katalon.controller.ReportController;
import com.kms.katalon.controller.TestSuiteController;
import com.kms.katalon.core.util.internal.PathUtil;
import com.kms.katalon.dal.exception.DALException;
import com.kms.katalon.entity.report.ReportEntity;
import com.kms.katalon.entity.testsuite.FilteringTestSuiteEntity;
import com.kms.katalon.entity.testsuite.TestSuiteEntity;
import com.kms.katalon.tracking.service.Trackings;

public class OpenTestSuiteHandler {

    private static final String NEW_TEST_SUITE_TPL_LOC = "resources/template/new_test_suite.tpl";

    private static final String DEFAULT_CONTAINER_DATA = StringConstants.HAND_DEFAULT_CONTAINER_DATA;

    private static final String TEST_SUITE_BUNDLE_URI = "bundleclass://com.kms.katalon.composer.testsuite/";
    
    private static final String REPORT_BUNDLE_ID = "bundleclass://com.kms.katalon.composer.report/";

    private static final String TEST_SUITE_MAIN_PART_URI = TEST_SUITE_BUNDLE_URI + TestSuitePart.class.getName();

    private static final String FILTERING_TEST_SUITE_MAIN_PART_URI = TEST_SUITE_BUNDLE_URI
            + FilteringTestSuitePart.class.getName();

    private static final String FILTERING_TEST_SUITE_COMPOSITE_PART_URI = TEST_SUITE_BUNDLE_URI
            + FilteringTestSuiteCompositePart.class.getName();

    private static final String TEST_SUITE_COMPOSITE_PART_URI = TEST_SUITE_BUNDLE_URI
            + TestSuiteCompositePart.class.getName();

    private static final String TEST_SUITE_INTEGRATION_PART_URI = TEST_SUITE_BUNDLE_URI
            + TestSuiteIntegrationPart.class.getName();
    
    private static final String TEST_SUITE_RESULT_PART_URI = REPORT_BUNDLE_ID
            + "com.kms.katalon.composer.report.parts.ReportPart";

    @Inject
    private MApplication application;

    @Inject
    private EPartService partService;

    @Inject
    private EModelService modelService;

    @Inject
    private IEventBroker eventBroker;

    @Inject
    private IEclipseContext context;

    @PostConstruct
    public void registerEventHandler() {
        eventBroker.subscribe(EventConstants.EXPLORER_OPEN_SELECTED_ITEM, new EventHandler() {

            @Override
            public void handleEvent(Event event) {
                Object object = event.getProperty(EventConstants.EVENT_DATA_PROPERTY_NAME);
                if (object != null && object instanceof TestSuiteEntity) {
                    excute((TestSuiteEntity) object);
                }

            }
        });
    }

    @Inject
    @Optional
    private void excute(@UIEventTopic(EventConstants.TEST_SUITE_OPEN) TestSuiteEntity testSuite) {
        if (testSuite instanceof FilteringTestSuiteEntity) {
            openFilteringTestSuiteEntity((FilteringTestSuiteEntity) testSuite);
        } else {
            openManualTestSuiteEntity(testSuite);
        }
    }

    private void openFilteringTestSuiteEntity(FilteringTestSuiteEntity testSuite) {
        MCompositePart testSuiteCompositePart = null;
        try {
            if (testSuite != null) {

                MPartStack stack = (MPartStack) modelService.find(IdConstants.COMPOSER_CONTENT_PARTSTACK_ID,
                        application);
                if (stack != null) {
                    String testSuiteCompositePartId = EntityPartUtil.getTestSuiteCompositePartId(testSuite.getId());
                    testSuiteCompositePart = (MCompositePart) modelService.find(testSuiteCompositePartId, stack);
                    boolean alreadyOpened = true;
                    if (testSuiteCompositePart == null) {
                        testSuiteCompositePart = modelService.createModelElement(MCompositePart.class);
                        testSuiteCompositePart.setElementId(testSuiteCompositePartId);
                        testSuiteCompositePart.setLabel(testSuite.getName());
                        testSuiteCompositePart.setCloseable(true);
                        testSuiteCompositePart.setContributionURI(FILTERING_TEST_SUITE_COMPOSITE_PART_URI);
                        testSuiteCompositePart.setContainerData(DEFAULT_CONTAINER_DATA);
                        testSuiteCompositePart.setIconURI(ImageConstants.URL_16_FILTERING_TEST_SUITE);
                        testSuiteCompositePart.setObject(testSuite);
                        testSuiteCompositePart.setTooltip(testSuite.getIdForDisplay());
                        stack.getChildren().add(testSuiteCompositePart);
                        alreadyOpened = false;
                    }

                    String subPartStackId = testSuiteCompositePartId + IdConstants.TEST_SUITE_SUB_PART_STACK_ID_SUFFIX;

                    MPartStack subPartStack = (MPartStack) modelService.find(subPartStackId, testSuiteCompositePart);
                    if (subPartStack == null) {
                        subPartStack = modelService.createModelElement(MPartStack.class);
                        subPartStack.setElementId(subPartStackId);
                        subPartStack.setContainerData(DEFAULT_CONTAINER_DATA);
                        testSuiteCompositePart.getChildren().add(subPartStack);
                    }

                    String testSuiteMainPartId = testSuiteCompositePartId + IdConstants.TEST_SUITE_MAIN_PART_ID_SUFFIX;
                    MPart testSuiteMainPart = (MPart) modelService.find(testSuiteMainPartId, subPartStack);
                    if (testSuiteMainPart == null) {
                        testSuiteMainPart = modelService.createModelElement(MPart.class);
                        testSuiteMainPart.setElementId(testSuiteMainPartId);
                        testSuiteMainPart.setContributionURI(FILTERING_TEST_SUITE_MAIN_PART_URI);
                        testSuiteMainPart.setContainerData(DEFAULT_CONTAINER_DATA);
                        testSuiteMainPart.getTags().add(IPresentationEngine.NO_MOVE);
                        context.set(FilteringTestSuiteEntity.class, testSuite);
                        subPartStack.getChildren().add(testSuiteMainPart);
                    }

                    String testSuiteScriptPartId = testSuiteCompositePartId
                            + IdConstants.TEST_SUITE_SCRIPT_PART_ID_SUFFIX;
                    MPart testSuiteScriptPart = (MPart) modelService.find(testSuiteScriptPartId, subPartStack);
                    if (testSuiteScriptPart == null) {
                        File scriptFile = TestSuiteController.getInstance().getTestSuiteScriptFile(testSuite);
                        if (scriptFile == null || !scriptFile.exists()) {
                            scriptFile = createTestSuiteScriptFile(testSuite);
                        }
                        testSuiteScriptPart = GroovyEditorUtil.createEditorPart(testSuite.getProject(),
                                PathUtil.absoluteToRelativePath(scriptFile.getAbsolutePath(),
                                        testSuite.getProject().getFolderLocation()),
                                partService);
                        testSuiteScriptPart.setElementId(testSuiteScriptPartId);
                        testSuiteScriptPart.getTags().add(IPresentationEngine.NO_MOVE);
                        testSuiteScriptPart.setLabel(ComposerTestsuiteMessageConstants.PA_TAB_SCRIPT);
                        subPartStack.getChildren().add(testSuiteScriptPart);
                    }

                    String testSuiteIntegrationPartId = testSuiteCompositePartId
                            + IdConstants.TEST_SUITE_INTEGRATION_PART_ID_SUFFIX;

                    MPart testSuiteIntegrationPart = (MPart) modelService.find(testSuiteIntegrationPartId,
                            subPartStack);
                    if (testSuiteIntegrationPart == null) {
                        testSuiteIntegrationPart = modelService.createModelElement(MPart.class);
                        testSuiteIntegrationPart.setElementId(testSuiteIntegrationPartId);
                        testSuiteIntegrationPart.setContributionURI(TEST_SUITE_INTEGRATION_PART_URI);
                        testSuiteIntegrationPart.setContainerData(DEFAULT_CONTAINER_DATA);
                        testSuiteIntegrationPart.getTags().add(IPresentationEngine.NO_MOVE);
                        context.set(TestSuiteEntity.class, testSuite);
                        subPartStack.getChildren().add(testSuiteIntegrationPart);
                    }
                    
                    String testSuiteResultPartId = testSuiteCompositePartId
                            + IdConstants.TEST_SUITE_RESULT_PART_ID_SUFFIX;
                    
                    MPart testSuiteResultPart = (MPart) modelService.find(testSuiteResultPartId,
                            subPartStack);
                    if (testSuiteResultPart == null) {
                        testSuiteResultPart = modelService.createModelElement(MPart.class);
                        testSuiteResultPart.setElementId(testSuiteResultPartId);
                        testSuiteResultPart.setContributionURI(TEST_SUITE_RESULT_PART_URI);
                        testSuiteResultPart.setContainerData(DEFAULT_CONTAINER_DATA);
                        testSuiteResultPart.getTags().add(IPresentationEngine.NO_MOVE);
                        subPartStack.getChildren().add(testSuiteResultPart);
                    }

                    partService.activate(testSuiteCompositePart);
                    partService.activate(testSuiteMainPart);
                    partService.activate(testSuiteScriptPart);
                    partService.activate(testSuiteIntegrationPart);
                    
                    ReportEntity report = ReportController.getInstance().getLastRunReportEntity(testSuite);
                    context.set(ReportEntity.class, report);
                    partService.activate(testSuiteResultPart);

                    subPartStack.setSelectedElement(testSuiteMainPart);
                    stack.setSelectedElement(testSuiteCompositePart);

                    FilteringTestSuiteCompositePart testSuiteParentCompositePart = (FilteringTestSuiteCompositePart) testSuiteCompositePart
                            .getObject();
                    testSuiteParentCompositePart.setOriginalTestSuite(testSuite);
                    if (!testSuiteParentCompositePart.isInitialized()) {
                        testSuiteParentCompositePart.initComponent();
                    }

                    if (!alreadyOpened) {
                        Trackings.trackOpenObject("dynamicQueryingTestSuite");
                    }
                }
            }
        } catch (Exception e) {
            if (testSuiteCompositePart != null && testSuiteCompositePart.isVisible()) {
                partService.hidePart(testSuiteCompositePart, true);
            }
            LoggerSingleton.logError(e);
            MessageDialog.openError(null, StringConstants.ERROR_TITLE,
                    StringConstants.HAND_ERROR_MSG_CANNOT_OPEN_TEST_SUITE);
        }
    }

    private void openManualTestSuiteEntity(TestSuiteEntity testSuite) {
        MCompositePart testSuiteCompositePart = null;
        try {
            if (testSuite != null) {

                MPartStack stack = (MPartStack) modelService.find(IdConstants.COMPOSER_CONTENT_PARTSTACK_ID,
                        application);
                if (stack != null) {
                    String testSuiteCompositePartId = EntityPartUtil.getTestSuiteCompositePartId(testSuite.getId());
                    testSuiteCompositePart = (MCompositePart) modelService.find(testSuiteCompositePartId, stack);
                    boolean alreadyOpened = true;
                    if (testSuiteCompositePart == null) {
                        testSuiteCompositePart = modelService.createModelElement(MCompositePart.class);
                        testSuiteCompositePart.setElementId(testSuiteCompositePartId);
                        testSuiteCompositePart.setLabel(testSuite.getName());
                        testSuiteCompositePart.setCloseable(true);
                        testSuiteCompositePart.setContributionURI(TEST_SUITE_COMPOSITE_PART_URI);
                        testSuiteCompositePart.setContainerData(DEFAULT_CONTAINER_DATA);
                        testSuiteCompositePart.setIconURI(ImageConstants.URL_16_TEST_SUITE);
                        testSuiteCompositePart.setObject(testSuite);
                        testSuiteCompositePart.setTooltip(testSuite.getIdForDisplay());
                        stack.getChildren().add(testSuiteCompositePart);
                        alreadyOpened = false;
                    }

                    String subPartStackId = testSuiteCompositePartId + IdConstants.TEST_SUITE_SUB_PART_STACK_ID_SUFFIX;

                    MPartStack subPartStack = (MPartStack) modelService.find(subPartStackId, testSuiteCompositePart);
                    if (subPartStack == null) {
                        subPartStack = modelService.createModelElement(MPartStack.class);
                        subPartStack.setElementId(subPartStackId);
                        subPartStack.setContainerData(DEFAULT_CONTAINER_DATA);
                        testSuiteCompositePart.getChildren().add(subPartStack);
                    }

                    String testSuiteMainPartId = testSuiteCompositePartId + IdConstants.TEST_SUITE_MAIN_PART_ID_SUFFIX;
                    MPart testSuiteMainPart = (MPart) modelService.find(testSuiteMainPartId, subPartStack);
                    if (testSuiteMainPart == null) {
                        testSuiteMainPart = modelService.createModelElement(MPart.class);
                        testSuiteMainPart.setElementId(testSuiteMainPartId);
                        testSuiteMainPart.setContributionURI(TEST_SUITE_MAIN_PART_URI);
                        testSuiteMainPart.setContainerData(DEFAULT_CONTAINER_DATA);
                        testSuiteMainPart.getTags().add(IPresentationEngine.NO_MOVE);
                        context.set(TestSuiteEntity.class, testSuite);
                        subPartStack.getChildren().add(testSuiteMainPart);
                    }

                    String testSuiteScriptPartId = testSuiteCompositePartId
                            + IdConstants.TEST_SUITE_SCRIPT_PART_ID_SUFFIX;
                    MPart testSuiteScriptPart = (MPart) modelService.find(testSuiteScriptPartId, subPartStack);
                    if (testSuiteScriptPart == null) {
                        File scriptFile = TestSuiteController.getInstance().getTestSuiteScriptFile(testSuite);
                        if (scriptFile == null || !scriptFile.exists()) {
                            scriptFile = createTestSuiteScriptFile(testSuite);
                        }
                        testSuiteScriptPart = GroovyEditorUtil.createEditorPart(testSuite.getProject(),
                                PathUtil.absoluteToRelativePath(scriptFile.getAbsolutePath(),
                                        testSuite.getProject().getFolderLocation()),
                                partService);
                        testSuiteScriptPart.setElementId(testSuiteScriptPartId);
                        testSuiteScriptPart.getTags().add(IPresentationEngine.NO_MOVE);
                        testSuiteScriptPart.setLabel(ComposerTestsuiteMessageConstants.PA_TAB_SCRIPT);
                        subPartStack.getChildren().add(testSuiteScriptPart);
                    }

                    String testSuiteIntegrationPartId = testSuiteCompositePartId
                            + IdConstants.TEST_SUITE_INTEGRATION_PART_ID_SUFFIX;

                    MPart testSuiteIntegrationPart = (MPart) modelService.find(testSuiteIntegrationPartId,
                            subPartStack);
                    if (testSuiteIntegrationPart == null) {
                        testSuiteIntegrationPart = modelService.createModelElement(MPart.class);
                        testSuiteIntegrationPart.setElementId(testSuiteIntegrationPartId);
                        testSuiteIntegrationPart.setContributionURI(TEST_SUITE_INTEGRATION_PART_URI);
                        testSuiteIntegrationPart.setContainerData(DEFAULT_CONTAINER_DATA);
                        testSuiteIntegrationPart.getTags().add(IPresentationEngine.NO_MOVE);
                        context.set(TestSuiteEntity.class, testSuite);
                        subPartStack.getChildren().add(testSuiteIntegrationPart);
                    }

                    String testSuiteResultPartId = testSuiteCompositePartId
                            + IdConstants.TEST_SUITE_RESULT_PART_ID_SUFFIX;
                    
                    MPart testSuiteResultPart = (MPart) modelService.find(testSuiteResultPartId,
                            subPartStack);
                    if (testSuiteResultPart == null) {
                        testSuiteResultPart = modelService.createModelElement(MPart.class);
                        testSuiteResultPart.setElementId(testSuiteResultPartId);
                        testSuiteResultPart.setContributionURI(TEST_SUITE_RESULT_PART_URI);
                        testSuiteResultPart.setContainerData(DEFAULT_CONTAINER_DATA);
                        testSuiteResultPart.getTags().add(IPresentationEngine.NO_MOVE);
                        subPartStack.getChildren().add(testSuiteResultPart);
                    }
                                        
                    partService.activate(testSuiteCompositePart);
                    partService.activate(testSuiteMainPart);
                    partService.activate(testSuiteScriptPart);
                    partService.activate(testSuiteIntegrationPart);
                    
                    ReportEntity report = ReportController.getInstance().getLastRunReportEntity(testSuite);
                    context.set(ReportEntity.class, report);
                    partService.activate(testSuiteResultPart);

                    subPartStack.setSelectedElement(testSuiteMainPart);
                    stack.setSelectedElement(testSuiteCompositePart);

                    TestSuiteCompositePart testSuiteParentCompositePart = (TestSuiteCompositePart) testSuiteCompositePart
                            .getObject();
                    if (!testSuiteParentCompositePart.isInitialized()) {
                        testSuiteParentCompositePart.initComponent();
                    }

                    if (!alreadyOpened) {
                        Trackings.trackOpenObject("testSuite");
                    }
                }
            }
        } catch (Exception e) {
            if (testSuiteCompositePart != null && testSuiteCompositePart.isVisible()) {
                partService.hidePart(testSuiteCompositePart, true);
            }
            LoggerSingleton.logError(e);
            MessageDialog.openError(null, StringConstants.ERROR_TITLE,
                    StringConstants.HAND_ERROR_MSG_CANNOT_OPEN_TEST_SUITE);
        }
    }

    private File createTestSuiteScriptFile(TestSuiteEntity testSuite) throws DALException, IOException {
        File newTestSuiteScriptFile = TestSuiteController.getInstance().newTestSuiteScriptFile(testSuite);
        FileUtils.writeStringToFile(newTestSuiteScriptFile, getFileContent(NEW_TEST_SUITE_TPL_LOC), DF_CHARSET, true);
        return newTestSuiteScriptFile;
    }

    private String getFileContent(String filePath) {
        URL url = FileLocator.find(FrameworkUtil.getBundle(OpenTestSuiteHandler.class), new Path(filePath), null);
        try {
            return StringUtils.join(IOUtils.readLines(new BufferedInputStream(url.openStream())), "\n");
        } catch (IOException e) {
            LoggerSingleton.logError(e);
            return StringUtils.EMPTY;
        }
    }
}
