package com.kms.katalon.composer.testcase.handlers;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.e4.core.contexts.IEclipseContext;
import org.eclipse.e4.core.di.annotations.Optional;
import org.eclipse.e4.core.services.events.IEventBroker;
import org.eclipse.e4.ui.di.UIEventTopic;
import org.eclipse.e4.ui.internal.workbench.PartServiceImpl;
import org.eclipse.e4.ui.model.application.MApplication;
import org.eclipse.e4.ui.model.application.ui.basic.MCompositePart;
import org.eclipse.e4.ui.model.application.ui.basic.MPart;
import org.eclipse.e4.ui.model.application.ui.basic.MPartStack;
import org.eclipse.e4.ui.workbench.IPresentationEngine;
import org.eclipse.e4.ui.workbench.modeling.EModelService;
import org.eclipse.e4.ui.workbench.modeling.EPartService;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.ui.internal.e4.compatibility.CompatibilityEditor;
import org.osgi.service.event.Event;
import org.osgi.service.event.EventHandler;

import com.kms.katalon.composer.components.impl.util.EntityPartUtil;
import com.kms.katalon.composer.components.log.LoggerSingleton;
import com.kms.katalon.composer.components.services.PartServiceSingleton;
import com.kms.katalon.composer.testcase.constants.ImageConstants;
import com.kms.katalon.composer.testcase.constants.StringConstants;
import com.kms.katalon.composer.testcase.parts.TestCaseCompositePart;
import com.kms.katalon.composer.testcase.parts.TestCaseIntegrationPart;
import com.kms.katalon.composer.testcase.parts.TestCasePart;
import com.kms.katalon.composer.testcase.parts.TestCasePropertiesPart;
import com.kms.katalon.composer.testcase.parts.TestCaseVariablePart;
import com.kms.katalon.composer.testcase.preferences.TestCasePreferenceDefaultValueInitializer;
import com.kms.katalon.composer.util.groovy.GroovyEditorUtil;
import com.kms.katalon.composer.util.groovy.GroovyGuiUtil;
import com.kms.katalon.constants.EventConstants;
import com.kms.katalon.constants.IdConstants;
import com.kms.katalon.entity.testcase.TestCaseEntity;

@SuppressWarnings("restriction")
public class OpenTestCaseHandler {

    private static final String DEFAULT_CONTAINER_DATA = StringConstants.HAND_DEFAULT_CONTAINER_DATA;
    
    private static final String TEST_CASE_BUNDLE_URI = "bundleclass://com.kms.katalon.composer.testcase/";

    private static final String TEST_CASE_GENERAL_PART_URI = TEST_CASE_BUNDLE_URI + TestCasePart.class.getName();

    private static final String TEST_CASE_VARIABLES_PART_URI = TEST_CASE_BUNDLE_URI
            + TestCaseVariablePart.class.getName();

    private static final String TEST_CASE_COMPOSITE_PART_URI = TEST_CASE_BUNDLE_URI
            + TestCaseCompositePart.class.getName();

    private static final String TEST_CASE_INTEGRATION_PART_URI = TEST_CASE_BUNDLE_URI
            + TestCaseIntegrationPart.class.getName();

    private static final String TEST_CASE_PROPERTIES_PART_URI = TEST_CASE_BUNDLE_URI
            + TestCasePropertiesPart.class.getName();

    @Inject
    private MApplication application;

    @Inject
    private static EModelService modelService;

    @Inject
    private IEventBroker eventBroker;

    @Inject
    private IEclipseContext context;

    @PostConstruct
    public void registerEventHandler() {
        eventBroker.subscribe(EventConstants.EXPLORER_OPEN_SELECTED_ITEM, new EventHandler() {

            @Override
            public void handleEvent(Event event) {
                Object object = event.getProperty(EventConstants.EVENT_DATA_PROPERTY_NAME);
                if (object != null && object instanceof TestCaseEntity) {
                    openTestCase((TestCaseEntity) object);
                }
            }
        });
    }

    @Inject
    @Optional
    private void openTestCase(@UIEventTopic(EventConstants.TESTCASE_OPEN) TestCaseEntity entity) {
        EPartService partService = context.getActive(PartServiceImpl.class);
        if (partService == null) {
            partService = context.getActive(EPartService.class);
        }
        excute(entity, partService);
        PartServiceSingleton.getInstance().setPartService(partService);
    }

    private void excute(TestCaseEntity testCaseEntity, EPartService partService) {
        MCompositePart testCaseCompositePart = null;
        try {
            if (testCaseEntity != null) {

                MPartStack stack = (MPartStack) modelService.find(IdConstants.COMPOSER_CONTENT_PARTSTACK_ID,
                        application);
                if (stack != null) {
                    String testCaseCompositePartId = EntityPartUtil.getTestCaseCompositePartId(testCaseEntity.getId());
                    testCaseCompositePart = (MCompositePart) modelService.find(testCaseCompositePartId, stack);
                    if (testCaseCompositePart == null) {
                        testCaseCompositePart = modelService.createModelElement(MCompositePart.class);
                        testCaseCompositePart.setElementId(testCaseCompositePartId);
                        testCaseCompositePart.setLabel(testCaseEntity.getName());
                        testCaseCompositePart.setCloseable(true);
                        testCaseCompositePart.setContributionURI(TEST_CASE_COMPOSITE_PART_URI);
                        testCaseCompositePart.setContainerData(DEFAULT_CONTAINER_DATA);
                        testCaseCompositePart.setIconURI(ImageConstants.URL_16_TEST_CASE);
                        testCaseCompositePart.setObject(testCaseEntity);
                        testCaseCompositePart.setTooltip(testCaseEntity.getIdForDisplay());
                        stack.getChildren().add(testCaseCompositePart);
                    }

                    String subPartStackId = testCaseCompositePartId + IdConstants.TEST_CASE_SUB_PART_STACK_ID_SUFFIX;

                    MPartStack subPartStack = (MPartStack) modelService.find(subPartStackId, testCaseCompositePart);
                    if (subPartStack == null) {
                        subPartStack = modelService.createModelElement(MPartStack.class);
                        subPartStack.setElementId(subPartStackId);
                        subPartStack.setContainerData(DEFAULT_CONTAINER_DATA);
                        testCaseCompositePart.getChildren().add(subPartStack);
                    }

                    String testCasePartId = testCaseCompositePartId + IdConstants.TEST_CASE_GENERAL_PART_ID_SUFFIX;
                    MPart testCasePart = (MPart) modelService.find(testCasePartId, subPartStack);
                    if (testCasePart == null) {
                        testCasePart = modelService.createModelElement(MPart.class);
                        testCasePart.setElementId(testCasePartId);
                        testCasePart.setContributionURI(TEST_CASE_GENERAL_PART_URI);
                        testCasePart.setContainerData(DEFAULT_CONTAINER_DATA);
                        testCasePart.getTags().add(IPresentationEngine.NO_MOVE);
                        context.set(TestCaseEntity.class, testCaseEntity);
                        subPartStack.getChildren().add(testCasePart);
                        subPartStack.setSelectedElement(testCasePart);
                    }

                    String testCaseEditorId = testCaseCompositePartId + IdConstants.TEST_CASE_EDITOR_PART_ID_SUFFIX;
                    MPart editorPart = (MPart) modelService.find(testCaseEditorId, subPartStack);
                    if (editorPart == null) {
                        editorPart = GroovyEditorUtil.createTestCaseEditorPart(ResourcesPlugin.getWorkspace().getRoot()
                                .getFile(GroovyGuiUtil.getGroovyScriptForTestCase(testCaseEntity).getPath()),
                                subPartStack, testCaseEditorId, partService,
                                TestCaseCompositePart.CHILD_TEST_CASE_EDITOR_PART_INDEX);
                    }

                    String testCaseVariablesPartId = testCaseCompositePartId
                            + IdConstants.TEST_CASE_VARIABLES_PART_ID_SUFFIX;
                    MPart testCaseVariablesPart = (MPart) modelService.find(testCaseVariablesPartId, subPartStack);
                    if (testCaseVariablesPart == null) {
                        testCaseVariablesPart = modelService.createModelElement(MPart.class);
                        testCaseVariablesPart.setElementId(testCaseVariablesPartId);
                        testCaseVariablesPart.setContributionURI(TEST_CASE_VARIABLES_PART_URI);
                        testCaseVariablesPart.setContainerData(DEFAULT_CONTAINER_DATA);
                        testCaseVariablesPart.getTags().add(IPresentationEngine.NO_MOVE);
                        context.set(TestCaseEntity.class, testCaseEntity);
                        subPartStack.getChildren().add(testCaseVariablesPart);
                    }

                    String testCaseIntegrationPartId = testCaseCompositePartId
                            + IdConstants.TEST_CASE_INTEGRATION_PART_ID_SUFFIX;

                    MPart testCaseIntegrationPart = (MPart) modelService.find(testCaseIntegrationPartId, subPartStack);
                    if (testCaseIntegrationPart == null) {
                        testCaseIntegrationPart = modelService.createModelElement(MPart.class);
                        testCaseIntegrationPart.setElementId(testCaseIntegrationPartId);
                        testCaseIntegrationPart.setContributionURI(TEST_CASE_INTEGRATION_PART_URI);
                        testCaseIntegrationPart.setContainerData(DEFAULT_CONTAINER_DATA);
                        testCaseIntegrationPart.getTags().add(IPresentationEngine.NO_MOVE);
                        context.set(TestCaseEntity.class, testCaseEntity);
                        subPartStack.getChildren().add(testCaseIntegrationPart);
                    }

                    String tcPropertiesPartId = testCaseCompositePartId
                            + IdConstants.TEST_CASE_PROPERTIES_PART_ID_SUFFIX;
                    MPart tcPropertiesPart = (MPart) modelService.find(tcPropertiesPartId, subPartStack);
                    if (tcPropertiesPart == null) {
                        tcPropertiesPart = modelService.createModelElement(MPart.class);
                        tcPropertiesPart.setElementId(tcPropertiesPartId);
                        tcPropertiesPart.setContributionURI(TEST_CASE_PROPERTIES_PART_URI);
                        tcPropertiesPart.setContainerData(DEFAULT_CONTAINER_DATA);
                        tcPropertiesPart.getTags().add(IPresentationEngine.NO_MOVE);
                        context.set(TestCaseEntity.class, testCaseEntity);
                        subPartStack.getChildren().add(tcPropertiesPart);
                    }

                    partService.activate(editorPart);
                    partService.activate(testCaseCompositePart);
                    partService.activate(testCaseVariablesPart);
                    partService.activate(testCaseIntegrationPart);
                    partService.activate(tcPropertiesPart);
                    partService.activate(testCasePart);

                    // for macOS
                    if (StringConstants.PA_TAB_SCRIPT
                            .equals(TestCasePreferenceDefaultValueInitializer.getTestCasePartStartView())) {
                        partService.activate(editorPart);
                    }

                    stack.setSelectedElement(testCaseCompositePart);

                    TestCaseCompositePart testCaseParentCompositePart = (TestCaseCompositePart) testCaseCompositePart
                            .getObject();
                    if (!testCaseParentCompositePart.isInitialized()) {
                        testCaseParentCompositePart.initComponent();
                        // testCaseParentCompositePart.setScriptContentToManual();
                    } else {
                        testCaseParentCompositePart.initDefaultSelectedPart();
                    }
                    ((CompatibilityEditor) editorPart.getObject()).getEditor().addPropertyListener(
                            testCaseParentCompositePart.getChildPropertyListner());
                }
            }
        } catch (Exception e) {
            if (testCaseCompositePart != null && testCaseCompositePart.isVisible()) {
                partService.hidePart(testCaseCompositePart, true);
            }
            LoggerSingleton.logError(e);
            MessageDialog.openError(null, StringConstants.ERROR_TITLE,
                    StringConstants.HAND_ERROR_MSG_CANNOT_OPEN_TEST_CASE);
        }
    }
}
