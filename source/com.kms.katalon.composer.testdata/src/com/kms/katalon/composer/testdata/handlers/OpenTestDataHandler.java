package com.kms.katalon.composer.testdata.handlers;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.eclipse.e4.core.di.annotations.Optional;
import org.eclipse.e4.core.services.events.IEventBroker;
import org.eclipse.e4.ui.di.UIEventTopic;
import org.eclipse.e4.ui.model.application.MApplication;
import org.eclipse.e4.ui.model.application.ui.basic.MPart;
import org.eclipse.e4.ui.model.application.ui.basic.MPartStack;
import org.eclipse.e4.ui.workbench.modeling.EModelService;
import org.eclipse.e4.ui.workbench.modeling.EPartService;
import org.eclipse.e4.ui.workbench.modeling.EPartService.PartState;
import org.osgi.service.event.Event;
import org.osgi.service.event.EventHandler;

import com.kms.katalon.composer.components.impl.util.EntityPartUtil;
import com.kms.katalon.composer.components.log.LoggerSingleton;
import com.kms.katalon.composer.testdata.constants.ImageConstants;
import com.kms.katalon.composer.testdata.parts.CSVTestDataPart;
import com.kms.katalon.composer.testdata.parts.DBTestDataPart;
import com.kms.katalon.composer.testdata.parts.ExcelTestDataPart;
import com.kms.katalon.composer.testdata.parts.InternalTestDataPart;
import com.kms.katalon.constants.EventConstants;
import com.kms.katalon.constants.IdConstants;
import com.kms.katalon.entity.testdata.DataFileEntity;
import com.kms.katalon.entity.testdata.DataFileEntity.DataFileDriverType;

public class OpenTestDataHandler {

    private static final String TEST_DATA_BUNDLE_URI = "bundleclass://com.kms.katalon.composer.testdata/";

    private static final String EXCEL_TEST_DATA_PART_URI = TEST_DATA_BUNDLE_URI + ExcelTestDataPart.class.getName();

    private static final String INTERNAL_TEST_DATA_PART_URI = TEST_DATA_BUNDLE_URI
            + InternalTestDataPart.class.getName();

    private static final String CSV_TEST_DATA_PART_URI = TEST_DATA_BUNDLE_URI + CSVTestDataPart.class.getName();

    private static final String DB_TEST_DATA_PART_URI = TEST_DATA_BUNDLE_URI + DBTestDataPart.class.getName();

    @Inject
    MApplication application;

    @Inject
    EPartService partService;

    @Inject
    EModelService modelService;

    // @Inject
    @PostConstruct
    public void registerEventHandler(IEventBroker eventBroker) {
        eventBroker.subscribe(EventConstants.EXPLORER_OPEN_SELECTED_ITEM, new EventHandler() {
            @Override
            public void handleEvent(Event event) {
                Object object = event.getProperty(EventConstants.EVENT_DATA_PROPERTY_NAME);
                if (object != null && object instanceof DataFileEntity) {
                    execute((DataFileEntity) object);
                }
            }
        });
    }

    @Inject
    @Optional
    private void getNotifications(@UIEventTopic(EventConstants.TEST_DATA_OPEN) DataFileEntity entity) {
        execute(entity);
    }

    public void execute(DataFileEntity testDataObject) {
        try {
            if (testDataObject != null) {
                String partId = EntityPartUtil.getTestDataPartId(testDataObject.getId());
                MPartStack stack = (MPartStack) modelService.find(IdConstants.COMPOSER_CONTENT_PARTSTACK_ID,
                        application);
                MPart mPart = (MPart) modelService.find(partId, application);
                if (mPart == null) {
                    mPart = modelService.createModelElement(MPart.class);
                    mPart.setElementId(partId);
                    mPart.setLabel(testDataObject.getName());

                    mPart.setIconURI(ImageConstants.URL_16_TEST_DATA);

                    if (testDataObject.getDriver() == DataFileDriverType.ExcelFile) {
                        mPart.setContributionURI(EXCEL_TEST_DATA_PART_URI);
                    } else if (testDataObject.getDriver() == DataFileDriverType.InternalData) {
                        mPart.setContributionURI(INTERNAL_TEST_DATA_PART_URI);
                    } else if (testDataObject.getDriver() == DataFileDriverType.CSV) {
                        mPart.setContributionURI(CSV_TEST_DATA_PART_URI);
                    } else if (testDataObject.getDriver() == DataFileDriverType.DBData) {
                        mPart.setContributionURI(DB_TEST_DATA_PART_URI);
                    }
                    mPart.setCloseable(true);
                    stack.getChildren().add(mPart);
                }

                if (mPart.getObject() == null) {
                    mPart.setObject(testDataObject);
                }

                partService.showPart(mPart, PartState.ACTIVATE);
                stack.setSelectedElement(mPart);
            }
        } catch (Exception e) {
            LoggerSingleton.logError(e);
        }
    }
}
